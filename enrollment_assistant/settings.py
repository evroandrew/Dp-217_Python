"""
Django settings for enrollment_assistant project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import sys
import os
import logging
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, '/static/'),
)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3ocig*9(+84i-05^=s9aate*&1*8m@1p476!!&cs)jdb=&o89e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)

ALLOWED_HOSTS = ['dp-217.herokuapp.com', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'dbbackup',
    'modeltranslation',
    'django_crontab',
    'questioning',
    'users',
    'universearch',
    'relocation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'enrollment_assistant.middlewares.CustomMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'enrollment_assistant.urls'

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': BASE_DIR + '/db_backup/'}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/templates/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'enrollment_assistant.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# If you have any questions with db connecting - you should use path variables
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME', 'postgres'),
        'USER': os.environ.get('DB_USER', 'doadmin'),
        'PASSWORD': os.environ.get('DB_PASS', 'FFGCBPpDg7ToDr2h'),
        'HOST': os.environ.get('DB_HOST', 'db-postgresql-fra1-83848-do-user-10341772-0.b.db.ondigitalocean.com'),
        'PORT': os.environ.get('DB_PORT', '25060'),
    }
}
if os.environ.get('DATABASE_URL') and not DEBUG:
    import dj_database_url

    db_from_env = dj_database_url.config(conn_max_age=500)
    DATABASES['default'].update(db_from_env)

KAFKA_SERVER = os.environ.get('KAFKA_SERVER', "localhost:9092")

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'uk'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

gettext = lambda s: s
LANGUAGES = {
    ('ru', gettext('Russia')),
    ('en', gettext('English')),
    ('uk', gettext('Ukrainian')),
}

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if sys.platform != 'win32':
    CRONJOBS = [
        ('10 8 * * *', 'questioning.cron.remove_obsolete_records'),
        ('* * * * *', 'users.cron.remove_users'),
    ]
"""
Run this command to add all the defined CRONJOBS to crontab(*nix cron utility). 
Make sure to run this command every time CRONJOBS is changed in any way.
python manage.py crontab add
"""

# Custom authentication user model
AUTH_USER_MODEL = "users.CustomUser"

# Custom authentication backend
AUTHENTICATION_BACKENDS = ['users.backends.EmailUsernameBackend']

# Redirect to home URL after login
LOGIN_REDIRECT_URL = '/'

# Redirect emails for changing password
EMAIL_BACKEND = 'enrollment_assistant.mail_back.EmailBackend'

# Interaction with mailing microservice
MAILING_SERVICE_URL = os.environ.get('MAILING_SERVICE_URL', 'http://127.0.0.1:5000')
MAILING_SEND_URL = MAILING_SERVICE_URL + '/mailing'

# Interaction with tickets microservice
TICKETS_SERVICE_URL = os.environ.get('TICKETS_SERVICE_URL', 'http://127.0.0.1:5000')
TICKETS_SEARCH_URL = TICKETS_SERVICE_URL + '/tickets'
TICKETS_STATIONS_SEARCH_URL = TICKETS_SERVICE_URL + '/stations'

# Caching
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get('REDIS_URL', "redis://127.0.0.1:6379/0"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

LOGGER = logging.getLogger()
TOPIC_SEND_MAIL = 'send_mail'
